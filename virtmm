#!/bin/sh
### BEGIN INIT INFO
# Provides:          virtmm
# Required-Start:    
# Required-Stop:     
# Should-Stop:
# Default-Start:
# Default-Stop:      0 1 6
# Short-Description: Start and shut down all KVM domains.
# Description:
### END INIT INFO
# Based on https://raw.githubusercontent.com/kumina/shutdown-kvm-guests/master/shutdown-kvm-guests.sh
# Inspired by https://bugs.launchpad.net/ubuntu/+source/libvirt/+bug/350936.

# Configure timeout (in seconds).
TIMEOUT=300
VIRSH=/usr/bin/virsh
LOCKF=/tmp/virtmm.lock

# List running domains.
list_running_domains() {
	#$VIRSH list | grep running | awk '{ print $2}'
  $VIRSH list --name | head -n -1
}
# List inactive domains.
list_inactive_domains() {
  $VIRSH list --inactive --name | head -n -1
}


case "$1" in
	reload,restart,force-reload)
		# We don't do anything here.
		;;
  start)    
    # Create some sort of semaphore.
		touch ${LOCKF}
    
		echo "Try to startup all inactive KVM domains..."

		list_inactive_domains | while read DOMAIN; do
			# Try to startup given domain.
			$VIRSH start $DOMAIN
		done
    
    rm $LOCKF
    ;;
	stop)
		echo "Try to cleanly shut down all running KVM domains..."

		# Create some sort of semaphore.
		touch $LOCKF

		# Try to shutdown each domain, one by one.
		list_running_domains | while read DOMAIN; do
			# Try to shutdown given domain.
			$VIRSH shutdown $DOMAIN
		done

		# Wait until all domains are shut down or timeout has reached.
		END_TIME=$(date -d "$TIMEOUT seconds" +%s)

		while [ $(date +%s) -lt $END_TIME ]; do
			# Break while loop when no domains are left.
			test -z "$(list_running_domains)" && break
			# Wait a litte, we don't want to DoS libvirt.
			sleep 1
		done

		# Clean up left over domains, one by one.
		list_running_domains | while read DOMAIN; do
			# Try to shutdown given domain.
			$VIRSH destroy $DOMAIN
			# Give libvirt some time for killing off the domain.
			sleep 3
		done
    
    rm $LOCKF
		;;
esac
